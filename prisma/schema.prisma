generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id       Int      @id @default(autoincrement())
  fullName String
  role     UserRole @default(USER)
  email    String   @unique
  password String

  provider         String?
  providerId       String?
  verified         DateTime
  verificationCode VerificationCode?
  cart             Cart?
  orders           Order[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  imageUrl    String
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ingredients Ingredient[]
  variations  Variation[]
}

model Variation {
  id        Int        @id @default(autoincrement())
  price     Int
  size      Int?
  type      Int?
  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id])
  productId Int
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Ingredient {
  id        Int        @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String
  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?       @unique
  token       String
  totalAmount Int        @default(0)
  items       CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id          Int          @id @default(autoincrement())
  variation   Variation    @relation(fields: [variationId], references: [id])
  variationId Int
  cart        Cart         @relation(fields: [cartId], references: [id])
  cartId      Int
  quantity    Int
  ingredients Ingredient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Order {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  address     String
  email       String
  phone       String
  comment     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  code   String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}
